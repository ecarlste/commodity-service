/* tslint:disable */
/* eslint-disable */
/*
 * Autogenerated by @creditkarma/thrift-typescript v3.7.6
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
*/
import * as thrift from "@creditkarma/thrift-server-core";
import * as Commodity from "./Commodity";
import * as CommodityServiceException from "./CommodityServiceException";
export const serviceName: string = "CommodityService";
export const annotations: thrift.IThriftAnnotations = {};
export const methodAnnotations: thrift.IMethodAnnotations = {
    addCommodity: {
        annotations: {},
        fieldAnnotations: {}
    }
};
export const methodNames: Array<string> = ["addCommodity"];
export const methodParameters: {
    [methodName: string]: number;
} = {
    addCommodity: 2
};
export interface IAddCommodity__Args {
    commodity: Commodity.ICommodity;
}
export interface IAddCommodity__ArgsArgs {
    commodity: Commodity.ICommodityArgs;
}
export const AddCommodity__ArgsCodec: thrift.IStructCodec<IAddCommodity__ArgsArgs, IAddCommodity__Args> = {
    encode(args: IAddCommodity__ArgsArgs, output: thrift.TProtocol): void {
        const obj: any = {
            commodity: args.commodity
        };
        output.writeStructBegin("AddCommodity__Args");
        if (obj.commodity != null) {
            output.writeFieldBegin("commodity", thrift.TType.STRUCT, 1);
            Commodity.CommodityCodec.encode(obj.commodity, output);
            output.writeFieldEnd();
        }
        else {
            throw new thrift.TProtocolException(thrift.TProtocolExceptionType.UNKNOWN, "Required field[commodity] is unset!");
        }
        output.writeFieldStop();
        output.writeStructEnd();
        return;
    },
    decode(input: thrift.TProtocol): IAddCommodity__Args {
        let _args: any = {};
        input.readStructBegin();
        while (true) {
            const ret: thrift.IThriftField = input.readFieldBegin();
            const fieldType: thrift.TType = ret.fieldType;
            const fieldId: number = ret.fieldId;
            if (fieldType === thrift.TType.STOP) {
                break;
            }
            switch (fieldId) {
                case 1:
                    if (fieldType === thrift.TType.STRUCT) {
                        const value_1: Commodity.ICommodity = Commodity.CommodityCodec.decode(input);
                        _args.commodity = value_1;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                default: {
                    input.skip(fieldType);
                }
            }
            input.readFieldEnd();
        }
        input.readStructEnd();
        if (_args.commodity !== undefined) {
            return {
                commodity: _args.commodity
            };
        }
        else {
            throw new thrift.TProtocolException(thrift.TProtocolExceptionType.UNKNOWN, "Unable to read AddCommodity__Args from input");
        }
    }
};
export class AddCommodity__Args extends thrift.StructLike implements IAddCommodity__Args {
    public commodity: Commodity.ICommodity;
    public readonly _annotations: thrift.IThriftAnnotations = {};
    public readonly _fieldAnnotations: thrift.IFieldAnnotations = {};
    constructor(args: IAddCommodity__ArgsArgs) {
        super();
        if (args.commodity != null) {
            const value_2: Commodity.ICommodity = new Commodity.Commodity(args.commodity);
            this.commodity = value_2;
        }
        else {
            throw new thrift.TProtocolException(thrift.TProtocolExceptionType.UNKNOWN, "Required field[commodity] is unset!");
        }
    }
    public static read(input: thrift.TProtocol): AddCommodity__Args {
        return new AddCommodity__Args(AddCommodity__ArgsCodec.decode(input));
    }
    public static write(args: IAddCommodity__ArgsArgs, output: thrift.TProtocol): void {
        return AddCommodity__ArgsCodec.encode(args, output);
    }
    public write(output: thrift.TProtocol): void {
        return AddCommodity__ArgsCodec.encode(this, output);
    }
}
export interface IAddCommodity__Result {
    success?: Commodity.ICommodity;
    exp?: CommodityServiceException.ICommodityServiceException;
}
export interface IAddCommodity__ResultArgs {
    success?: Commodity.ICommodityArgs;
    exp?: CommodityServiceException.ICommodityServiceExceptionArgs;
}
export const AddCommodity__ResultCodec: thrift.IStructCodec<IAddCommodity__ResultArgs, IAddCommodity__Result> = {
    encode(args: IAddCommodity__ResultArgs, output: thrift.TProtocol): void {
        const obj: any = {
            success: args.success,
            exp: args.exp
        };
        output.writeStructBegin("AddCommodity__Result");
        if (obj.success != null) {
            output.writeFieldBegin("success", thrift.TType.STRUCT, 0);
            Commodity.CommodityCodec.encode(obj.success, output);
            output.writeFieldEnd();
        }
        if (obj.exp != null) {
            output.writeFieldBegin("exp", thrift.TType.STRUCT, 1);
            CommodityServiceException.CommodityServiceExceptionCodec.encode(obj.exp, output);
            output.writeFieldEnd();
        }
        output.writeFieldStop();
        output.writeStructEnd();
        return;
    },
    decode(input: thrift.TProtocol): IAddCommodity__Result {
        let _args: any = {};
        input.readStructBegin();
        while (true) {
            const ret: thrift.IThriftField = input.readFieldBegin();
            const fieldType: thrift.TType = ret.fieldType;
            const fieldId: number = ret.fieldId;
            if (fieldType === thrift.TType.STOP) {
                break;
            }
            switch (fieldId) {
                case 0:
                    if (fieldType === thrift.TType.STRUCT) {
                        const value_3: Commodity.ICommodity = Commodity.CommodityCodec.decode(input);
                        _args.success = value_3;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 1:
                    if (fieldType === thrift.TType.STRUCT) {
                        const value_4: CommodityServiceException.ICommodityServiceException = CommodityServiceException.CommodityServiceExceptionCodec.decode(input);
                        _args.exp = value_4;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                default: {
                    input.skip(fieldType);
                }
            }
            input.readFieldEnd();
        }
        input.readStructEnd();
        return {
            success: _args.success,
            exp: _args.exp
        };
    }
};
export class AddCommodity__Result extends thrift.StructLike implements IAddCommodity__Result {
    public success?: Commodity.ICommodity;
    public exp?: CommodityServiceException.ICommodityServiceException;
    public readonly _annotations: thrift.IThriftAnnotations = {};
    public readonly _fieldAnnotations: thrift.IFieldAnnotations = {};
    constructor(args: IAddCommodity__ResultArgs = {}) {
        super();
        if (args.success != null) {
            const value_5: Commodity.ICommodity = new Commodity.Commodity(args.success);
            this.success = value_5;
        }
        if (args.exp != null) {
            const value_6: CommodityServiceException.ICommodityServiceException = new CommodityServiceException.CommodityServiceException(args.exp);
            this.exp = value_6;
        }
    }
    public static read(input: thrift.TProtocol): AddCommodity__Result {
        return new AddCommodity__Result(AddCommodity__ResultCodec.decode(input));
    }
    public static write(args: IAddCommodity__ResultArgs, output: thrift.TProtocol): void {
        return AddCommodity__ResultCodec.encode(args, output);
    }
    public write(output: thrift.TProtocol): void {
        return AddCommodity__ResultCodec.encode(this, output);
    }
}
export class Client<Context = any> extends thrift.ThriftClient<Context> {
    public static readonly serviceName: string = serviceName;
    public static readonly annotations: thrift.IThriftAnnotations = annotations;
    public static readonly methodAnnotations: thrift.IMethodAnnotations = methodAnnotations;
    public static readonly methodNames: Array<string> = methodNames;
    public readonly _serviceName: string = serviceName;
    public readonly _annotations: thrift.IThriftAnnotations = annotations;
    public readonly _methodAnnotations: thrift.IMethodAnnotations = methodAnnotations;
    public readonly _methodNames: Array<string> = methodNames;
    public readonly _methodParameters?: {
        [methodName: string]: number;
    } = methodParameters;
    public addCommodity(commodity: Commodity.ICommodityArgs, context?: Context): Promise<Commodity.ICommodity> {
        const writer: thrift.TTransport = new this.transport();
        const output: thrift.TProtocol = new this.protocol(writer);
        output.writeMessageBegin("addCommodity", thrift.MessageType.CALL, this.incrementRequestId());
        const args: IAddCommodity__ArgsArgs = { commodity };
        AddCommodity__ArgsCodec.encode(args, output);
        output.writeMessageEnd();
        return this.connection.send(writer.flush(), context).then((data: Buffer) => {
            const reader: thrift.TTransport = this.transport.receiver(data);
            const input: thrift.TProtocol = new this.protocol(reader);
            try {
                const { fieldName: fieldName, messageType: messageType }: thrift.IThriftMessage = input.readMessageBegin();
                if (fieldName === "addCommodity") {
                    if (messageType === thrift.MessageType.EXCEPTION) {
                        const err: thrift.TApplicationException = thrift.TApplicationExceptionCodec.decode(input);
                        input.readMessageEnd();
                        return Promise.reject(err);
                    }
                    else {
                        const result: IAddCommodity__Result = AddCommodity__ResultCodec.decode(input);
                        input.readMessageEnd();
                        if (result.exp != null) {
                            return Promise.reject(result.exp);
                        }
                        else if (result.success != null) {
                            return Promise.resolve(result.success);
                        }
                        else {
                            return Promise.reject(new thrift.TApplicationException(thrift.TApplicationExceptionType.UNKNOWN, "addCommodity failed: unknown result"));
                        }
                    }
                }
                else {
                    return Promise.reject(new thrift.TApplicationException(thrift.TApplicationExceptionType.WRONG_METHOD_NAME, "Received a response to an unknown RPC function: " + fieldName));
                }
            }
            catch (err) {
                return Promise.reject(err);
            }
        });
    }
}
export interface IHandler<Context = any> {
    addCommodity(commodity: Commodity.ICommodity, context?: Context): Commodity.ICommodityArgs | Promise<Commodity.ICommodityArgs>;
}
export class Processor<Context = any> extends thrift.ThriftProcessor<Context, IHandler<Context>> {
    protected readonly _handler: IHandler<Context>;
    public static readonly serviceName: string = serviceName;
    public static readonly annotations: thrift.IThriftAnnotations = annotations;
    public static readonly methodAnnotations: thrift.IMethodAnnotations = methodAnnotations;
    public static readonly methodNames: Array<string> = methodNames;
    public readonly _serviceName: string = serviceName;
    public readonly _annotations: thrift.IThriftAnnotations = annotations;
    public readonly _methodAnnotations: thrift.IMethodAnnotations = methodAnnotations;
    public readonly _methodNames: Array<string> = methodNames;
    constructor(handler: IHandler<Context>) {
        super();
        this._handler = handler;
    }
    public process(input: thrift.TProtocol, output: thrift.TProtocol, context: Context): Promise<Buffer> {
        return new Promise<Buffer>((resolve, reject): void => {
            const metadata: thrift.IThriftMessage = input.readMessageBegin();
            const fieldName: string = metadata.fieldName;
            const requestId: number = metadata.requestId;
            const methodName: string = "process_" + fieldName;
            switch (methodName) {
                case "process_addCommodity": {
                    resolve(this.process_addCommodity(requestId, input, output, context));
                    break;
                }
                default: {
                    input.skip(thrift.TType.STRUCT);
                    input.readMessageEnd();
                    const errMessage = "Unknown function " + fieldName;
                    const err = new thrift.TApplicationException(thrift.TApplicationExceptionType.UNKNOWN_METHOD, errMessage);
                    output.writeMessageBegin(fieldName, thrift.MessageType.EXCEPTION, requestId);
                    thrift.TApplicationExceptionCodec.encode(err, output);
                    output.writeMessageEnd();
                    resolve(output.flush());
                    break;
                }
            }
        });
    }
    public process_addCommodity(requestId: number, input: thrift.TProtocol, output: thrift.TProtocol, context: Context): Promise<Buffer> {
        return new Promise<Commodity.ICommodityArgs>((resolve, reject): void => {
            try {
                const args: IAddCommodity__Args = AddCommodity__ArgsCodec.decode(input);
                input.readMessageEnd();
                resolve(this._handler.addCommodity(args.commodity, context));
            }
            catch (err) {
                reject(err);
            }
        }).then((data: Commodity.ICommodityArgs): Buffer => {
            const result: IAddCommodity__ResultArgs = { success: data };
            output.writeMessageBegin("addCommodity", thrift.MessageType.REPLY, requestId);
            AddCommodity__ResultCodec.encode(result, output);
            output.writeMessageEnd();
            return output.flush();
        }).catch((err: Error): Buffer => {
            if (err instanceof CommodityServiceException.CommodityServiceException) {
                const result: IAddCommodity__ResultArgs = { exp: err };
                output.writeMessageBegin("addCommodity", thrift.MessageType.REPLY, requestId);
                AddCommodity__ResultCodec.encode(result, output);
                output.writeMessageEnd();
                return output.flush();
            }
            else {
                const result: thrift.TApplicationException = new thrift.TApplicationException(thrift.TApplicationExceptionType.UNKNOWN, err.message);
                output.writeMessageBegin("addCommodity", thrift.MessageType.EXCEPTION, requestId);
                thrift.TApplicationExceptionCodec.encode(result, output);
                output.writeMessageEnd();
                return output.flush();
            }
        });
    }
}
